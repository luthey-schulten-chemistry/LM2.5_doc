Installation
============

Dependencies
------------

 * `CMake <https://cmake.org>`_ 3.14 or newer.

 * `Google Protocol Buffers <https://developers.google.com/protocol-buffers/>`_

 * `HDF5 <https://www.hdfgroup.org/solutions/hdf5/>`_

 * `Python <https://www.python.org>`_ 3.7 or newer, and the standard scientific
   Python stack.

 * `Swig <http://www.swig.org>`_

 * `CUDA <https://developer.nvidia.com/cuda-zone>`_, 11.4 or newer. (*Optional MPD-RDME support*)

 * `VMD <http://www.ks.uiuc.edu/Research/vmd/>`_, Any version before 2.0 is supported. (*Optional VMD plugin*)


Preparation
-----------

Install Anaconda 3 if not already installed on your computer, download and follow the instructions at
https://www.anaconda.com/

If you want to do spatial RDME simulations which require GPUs, install CUDA, download and instructions can be found at
https://developer.nvidia.com/cuda-downloads

Add the following line at the end of /.bashrc so LM can find CUDA. If path to CUDA is different, export path to where CUDA is installed:
export PATH="/usr/local/cuda/bin/:$PATH"

Establish Conda Environment
---------------------------

The conda environment can be created from the yml files in Lattice-Microbes/conda_envs. Specifically, different yaml files are for
different uses:

    - lm_precomp.yml: Python 3.7 on x86_64 architecture
    - lm_precomp_py310.yml: Python 3.10 on x86_64 architecture
    - lm_precomp_aarch64.yml: Python 3.7 on aarch64 architecture

Go into the needed file and change the first line to whatever you want your environment name to be, then run:

.. code-block:: bash

    conda env create -n envname -f lm_precomp.yml
    conda activate envname

When your are done using the Conda environment either run

.. code-block:: bash

    conda deactivate

or simply close the terminal window.

Build
-----

Once you have created and activated your environment, go to a directory where you want to build Lattice Microbes 
and run the following commands:
(You do not need to run simulations where the build is located. LM will be installed in your environment as an executable.)

.. code-block:: bash

    mkdir build
    cd build
    cmake ../Lattice-Microbes/src/ -D MPD_GLOBAL_T_MATRIX=True \
                                   -D MPD_GLOBAL_R_MATRIX=True
    # The -D flags in the cmake options can be removed, 
    # if you build with smaller transition matrix and reaction 
    # matrix size limits.

Then,

.. code-block:: bash

    make

Install
-------

Simply run

.. code-block:: bash

    make install
    # Run make install as root or sudo if possible

This will install the Python modules and executables to your virtual
environment prefix. The `make install` should have also picked up the VMD
executable from your path and installed the molfile plugin properly.

Build and Install in a Container
--------------------------------

In `Lattice-Microbes/containers_build`, there are three files for building
a container that has Lattice Microbes installed. Specifically, the file `Dockerfile`
is for building a Docker container. To build a Docker container `lm25`, we can run:

.. code-block:: bash

    docker build -t lm25 .

The file `apptainer.def` is for building an Apptainer container that runs on an `x86_64`
architecture (like Delta), and we should use the command:

.. code-block:: bash

    apptainer build your-container.sif apptainer.def

The file `apptainer-dtai.def` is for building an Apptainer container that runs on an `aarch64`
architecture (like Delta AI), and we should use the command:

.. code-block:: bash

    apptainer build your-container.sif apptainer-dtai.def

Advanced Build Configuration
============================

The CMake build system provides a GUI for specifying build options.  To
configure the build, use ``ccmake`` for a curses-based interface, or
``cmake-gui`` for a GUI. If your prefer the command line, run 
``cmake -D<OPTION_NAME>=<VALUE> .`` in a configured build directory to set
build options. The standard flags are:

    **OPT_CUDA**
        Enable CUDA support

    **OPT_MPI**
        Enable MPI support. *Not currently working*

    **OPT_PYTHON**
        Enable Python bindings.

    **OPT_VMD**
        Build VMD plugin

There are also advanced options whose visibility can be toggled in the GUI. The
most common are

    **MPD_GLOBAL_S_MATRIX**
        Declare the stoichiometric matrix as ``__global__`` instead of
        ``__constant__``.

    **MPD_GLOBAL_T_MATRIX**
        Declare the transition matrix as ``__global__`` instead of
        ``__constant__``.

    **MPD_LATTICE_MAX_OCCUPANCY**
        Specify the maximum number of particles per subvolume. Currently only 8
        or 16 particles are valid choices.

    **MPD_MAX_REACTION_TABLE_ENTRIES**
        Specify the size of the reaction table.

    **MPD_MAX_RL_MATRIX_ENTRIES**
        Specify the size of the reaction location matrix.

    **MPD_MAX_S_MATRIX_ENTRIES**
        Specify the size of the stoichiometric matrix if it has been declared in
        ``__constant__`` memory.

    **MPD_MAX_TRANSITION_TABLE_ENTRIES**
        Specify the size of the transition table if it has been declared in
        ``__constant__`` memory.

